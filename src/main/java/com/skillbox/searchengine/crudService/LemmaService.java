package com.skillbox.searchengine.crudService;

import com.skillbox.searchengine.crudRepo.LemmaRepo;
import com.skillbox.searchengine.entity.Lemma;
import com.skillbox.searchengine.entity.Site;
import com.skillbox.searchengine.utils.LemmaCounter;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.Query;
import org.jsoup.nodes.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@Transactional
public class LemmaService {
    @Autowired
    private LemmaRepo lemmaRepo;
    @Autowired
    private JdbcTemplate jdbcTemplate;
    private static final int BATCH_SIZE = 30;

    public List<Lemma> find(String lemma) {
        Lemma probe = new Lemma();
        probe.setLemma(lemma);
        ExampleMatcher matcher = ExampleMatcher.matchingAny();
        Example<Lemma> example = Example.of(probe, matcher);
        return lemmaRepo.findAll(example);
    }

    public Lemma find(String lemma, int siteId) {
        List<Lemma> foundLemmas = find(lemma);
        for (Lemma l : foundLemmas) {
            if (l.getSiteId() == siteId) {
                return l;
            }
        }

        return null;
    }

    public List<Lemma> find(int siteId) {
        Lemma probe = new Lemma();
        probe.setSiteId(siteId);
        ExampleMatcher matcher = ExampleMatcher.matchingAny();
        Example<Lemma> example = Example.of(probe);
        return lemmaRepo.findAll(example);
    }

    /**
     * Extracts lemmas from Jsoup document and saves them in the database.
     * @param document - Jsoup document.
     * @return map, containing id and rank of saved lemmas.
     */
    public synchronized Map<Integer, Double> saveLemmas(Document document, Site site) {
        Map<Lemma, Double> lemmaRankMap = LemmaCounter.generateMap(document, site);
        return saveLemmaRankMap(lemmaRankMap, site);
    }

    /**
     * Saves map of lemma-rank into the database.
     * @param lemmaRankMap, generated by LemmaCounter.generateMap method.
     * @return map containing ids of saved lemmas and their ranks
     */
    //Inserts lemmas in batches into the database, returns their respective ids to generate a (lemma_id, rank) map
    //todo rewrite findId method to include site_id as well
    private Map<Integer, Double> saveLemmaRankMap(Map<Lemma, Double> lemmaRankMap, Site site) {
        Map<Integer, Double> idRankMap = new HashMap<>();
        List<Lemma> lemmas = new ArrayList<>(lemmaRankMap.keySet());
        lemmas.forEach(lemma -> lemma.setSiteId(site.getId()));

        batchInsert(lemmas);
        lemmas.forEach(lemma ->
                idRankMap.put(findId(lemma), lemmaRankMap.get(lemma)));
        return idRankMap;
    }

    //@param lemma - quasi-lemma, containing only String lemma value and siteId
    private  Integer findId(Lemma lemma) {
        Lemma repoLemma = find(lemma.getLemma(), lemma.getSiteId());
        return repoLemma == null ? null : repoLemma.getId();
    }

    public void batchInsert(List<Lemma> lemmas) {
        if (lemmas.size() > BATCH_SIZE) {
            List<List<Lemma>> batches = splitList(lemmas);
            batches.forEach(this::saveBatch);
        }
        else {
            saveBatch(lemmas);
        }
    }

    private List<List<Lemma>> splitList(List<Lemma> list) {
        List<List<Lemma>> result = new ArrayList<>();
        if (list.size() > BATCH_SIZE) {
            int count = list.size() % BATCH_SIZE == 0 ?
                    list.size() / BATCH_SIZE :
                    list.size() / BATCH_SIZE + 1;
            for (int i = 0; i < count; i++) {
                int start = i * BATCH_SIZE;
                int end = Math.min(start + BATCH_SIZE, list.size());
                result.add(list.subList(start, end));
            }
        } else {
            result.add(list);
        }
        return result;
    }

    private void saveBatch(List<Lemma> lemmas) {
        StringBuilder batchBuilder = new StringBuilder("INSERT INTO lemma (frequency, lemma, site_id) VALUES ");
        for (Lemma lemma : lemmas) {
            batchBuilder.append(lemma.getFieldsAsSQL());
            batchBuilder.append(",");
        }
        batchBuilder.deleteCharAt(batchBuilder.length() - 1);
        batchBuilder.append("ON DUPLICATE KEY UPDATE frequency = frequency + 1");
        jdbcTemplate.update(batchBuilder.toString());
    }
}
